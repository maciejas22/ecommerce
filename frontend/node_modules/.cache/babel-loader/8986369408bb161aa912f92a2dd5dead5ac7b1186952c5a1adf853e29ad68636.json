{"ast":null,"code":"import React, { forwardRef, useState } from 'react';\nimport useStyles from './Thumb.styles.js';\nimport { Box } from '../../Box/Box.js';\nimport { Transition } from '../../Transition/Transition.js';\nconst Thumb = forwardRef((_ref, ref) => {\n  let {\n    max,\n    min,\n    value,\n    position,\n    label,\n    dragging,\n    onMouseDown,\n    color,\n    classNames,\n    styles,\n    size,\n    labelTransition,\n    labelTransitionDuration,\n    labelTransitionTimingFunction,\n    labelAlwaysOn,\n    thumbLabel,\n    onFocus,\n    onBlur,\n    showLabelOnHover,\n    children = null,\n    disabled,\n    unstyled,\n    thumbSize,\n    variant\n  } = _ref;\n  const {\n    classes,\n    cx,\n    theme\n  } = useStyles({\n    color,\n    disabled,\n    thumbSize\n  }, {\n    name: \"Slider\",\n    classNames,\n    styles,\n    unstyled,\n    variant,\n    size\n  });\n  const [focused, setFocused] = useState(false);\n  const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n  return /* @__PURE__ */React.createElement(Box, {\n    tabIndex: 0,\n    role: \"slider\",\n    \"aria-label\": thumbLabel,\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": value,\n    ref,\n    className: cx(classes.thumb, {\n      [classes.dragging]: dragging\n    }),\n    onFocus: () => {\n      setFocused(true);\n      typeof onFocus === \"function\" && onFocus();\n    },\n    onBlur: () => {\n      setFocused(false);\n      typeof onBlur === \"function\" && onBlur();\n    },\n    onTouchStart: onMouseDown,\n    onMouseDown,\n    onClick: event => event.stopPropagation(),\n    style: {\n      [theme.dir === \"rtl\" ? \"right\" : \"left\"]: `${position}%`\n    }\n  }, children, /* @__PURE__ */React.createElement(Transition, {\n    mounted: label != null && isVisible,\n    duration: labelTransitionDuration,\n    transition: labelTransition,\n    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction\n  }, transitionStyles => /* @__PURE__ */React.createElement(\"div\", {\n    style: transitionStyles,\n    className: classes.label\n  }, label)));\n});\nThumb.displayName = \"@mantine/core/SliderThumb\";\nexport { Thumb };","map":{"version":3,"names":["Thumb","forwardRef","_ref","ref","max","min","value","position","label","dragging","onMouseDown","color","classNames","styles","size","labelTransition","labelTransitionDuration","labelTransitionTimingFunction","labelAlwaysOn","thumbLabel","onFocus","onBlur","showLabelOnHover","children","disabled","unstyled","thumbSize","variant","classes","cx","theme","useStyles","name","focused","setFocused","useState","isVisible","React","createElement","Box","tabIndex","role","className","thumb","onTouchStart","onClick","event","stopPropagation","style","dir","Transition","mounted","duration","transition","timingFunction","transitionTimingFunction","transitionStyles","displayName"],"sources":["C:\\Users\\Maciej\\Desktop\\projekt_indywidualny\\shop\\frontend\\node_modules\\@mantine\\core\\src\\Slider\\Thumb\\Thumb.tsx"],"sourcesContent":["import React, { useState, forwardRef } from 'react';\nimport { DefaultProps, MantineNumberSize, MantineColor, Selectors } from '@mantine/styles';\nimport { Box } from '../../Box';\nimport { Transition, MantineTransition } from '../../Transition';\nimport useStyles from './Thumb.styles';\n\nexport type ThumbStylesNames = Selectors<typeof useStyles>;\n\nexport interface ThumbProps extends DefaultProps<ThumbStylesNames> {\n  max: number;\n  min: number;\n  value: number;\n  position: number;\n  dragging: boolean;\n  color: MantineColor;\n  size: MantineNumberSize;\n  label: React.ReactNode;\n  onMouseDown(event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>): void;\n  labelTransition?: MantineTransition;\n  labelTransitionDuration?: number;\n  labelTransitionTimingFunction?: string;\n  labelAlwaysOn: boolean;\n  thumbLabel: string;\n  onFocus?(): void;\n  onBlur?(): void;\n  showLabelOnHover?: boolean;\n  children?: React.ReactNode;\n  disabled: boolean;\n  thumbSize: number;\n  variant: string;\n}\n\nexport const Thumb = forwardRef<HTMLDivElement, ThumbProps>(\n  (\n    {\n      max,\n      min,\n      value,\n      position,\n      label,\n      dragging,\n      onMouseDown,\n      color,\n      classNames,\n      styles,\n      size,\n      labelTransition,\n      labelTransitionDuration,\n      labelTransitionTimingFunction,\n      labelAlwaysOn,\n      thumbLabel,\n      onFocus,\n      onBlur,\n      showLabelOnHover,\n      children = null,\n      disabled,\n      unstyled,\n      thumbSize,\n      variant,\n    }: ThumbProps,\n    ref\n  ) => {\n    const { classes, cx, theme } = useStyles(\n      { color, disabled, thumbSize },\n      { name: 'Slider', classNames, styles, unstyled, variant, size }\n    );\n    const [focused, setFocused] = useState(false);\n    const isVisible = labelAlwaysOn || dragging || focused || showLabelOnHover;\n\n    return (\n      <Box<'div'>\n        tabIndex={0}\n        role=\"slider\"\n        aria-label={thumbLabel}\n        aria-valuemax={max}\n        aria-valuemin={min}\n        aria-valuenow={value}\n        ref={ref}\n        className={cx(classes.thumb, { [classes.dragging]: dragging })}\n        onFocus={() => {\n          setFocused(true);\n          typeof onFocus === 'function' && onFocus();\n        }}\n        onBlur={() => {\n          setFocused(false);\n          typeof onBlur === 'function' && onBlur();\n        }}\n        onTouchStart={onMouseDown}\n        onMouseDown={onMouseDown}\n        onClick={(event) => event.stopPropagation()}\n        style={{ [theme.dir === 'rtl' ? 'right' : 'left']: `${position}%` }}\n      >\n        {children}\n        <Transition\n          mounted={label != null && isVisible}\n          duration={labelTransitionDuration}\n          transition={labelTransition}\n          timingFunction={labelTransitionTimingFunction || theme.transitionTimingFunction}\n        >\n          {(transitionStyles) => (\n            <div style={transitionStyles} className={classes.label}>\n              {label}\n            </div>\n          )}\n        </Transition>\n      </Box>\n    );\n  }\n);\n\nThumb.displayName = '@mantine/core/SliderThumb';\n"],"mappings":";;;;AAIY,MAACA,KAAK,GAAGC,UAAU,CAAC,CAAAC,IAAA,EAyB7BC,GAAG,KAAK;EAAA,IAzBsB;IAC/BC,GAAG;IACHC,GAAG;IACHC,KAAK;IACLC,QAAQ;IACRC,KAAK;IACLC,QAAQ;IACRC,WAAW;IACXC,KAAK;IACLC,UAAU;IACVC,MAAM;IACNC,IAAI;IACJC,eAAe;IACfC,uBAAuB;IACvBC,6BAA6B;IAC7BC,aAAa;IACbC,UAAU;IACVC,OAAO;IACPC,MAAM;IACNC,gBAAgB;IAChBC,QAAQ,GAAG,IAAI;IACfC,QAAQ;IACRC,QAAQ;IACRC,SAAS;IACTC;EACF,CAAC,GAAAzB,IAAA;EACC,MAAM;IAAE0B,OAAO;IAAEC,EAAE;IAAEC;EAAK,CAAE,GAAGC,SAAS,CAAC;IAAEpB,KAAK;IAAEa,QAAQ;IAAEE;EAAS,CAAE,EAAE;IAAEM,IAAI,EAAE,QAAQ;IAAEpB,UAAU;IAAEC,MAAM;IAAEY,QAAQ;IAAEE,OAAO;IAAEb;EAAI,CAAE,CAAC;EACzI,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMC,SAAS,GAAGlB,aAAa,IAAIT,QAAQ,IAAIwB,OAAO,IAAIX,gBAAgB;EAC1E,sBAAuBe,KAAK,CAACC,aAAa,CAACC,GAAG,EAAE;IAC9CC,QAAQ,EAAE,CAAC;IACXC,IAAI,EAAE,QAAQ;IACd,YAAY,EAAEtB,UAAU;IACxB,eAAe,EAAEf,GAAG;IACpB,eAAe,EAAEC,GAAG;IACpB,eAAe,EAAEC,KAAK;IACtBH,GAAG;IACHuC,SAAS,EAAEb,EAAE,CAACD,OAAO,CAACe,KAAK,EAAE;MAAE,CAACf,OAAO,CAACnB,QAAQ,GAAGA;IAAQ,CAAE,CAAC;IAC9DW,OAAO,EAAEA,CAAA,KAAM;MACbc,UAAU,CAAC,IAAI,CAAC;MAChB,OAAOd,OAAO,KAAK,UAAU,IAAIA,OAAO,EAAE;IAChD,CAAK;IACDC,MAAM,EAAEA,CAAA,KAAM;MACZa,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOb,MAAM,KAAK,UAAU,IAAIA,MAAM,EAAE;IAC9C,CAAK;IACDuB,YAAY,EAAElC,WAAW;IACzBA,WAAW;IACXmC,OAAO,EAAGC,KAAK,IAAKA,KAAK,CAACC,eAAe,EAAE;IAC3CC,KAAK,EAAE;MAAE,CAAClB,KAAK,CAACmB,GAAG,KAAK,KAAK,GAAG,OAAO,GAAG,MAAM,GAAI,GAAE1C,QAAS;IAAE;EACrE,CAAG,EAAEgB,QAAQ,iBAAkBc,KAAK,CAACC,aAAa,CAACY,UAAU,EAAE;IAC3DC,OAAO,EAAE3C,KAAK,IAAI,IAAI,IAAI4B,SAAS;IACnCgB,QAAQ,EAAEpC,uBAAuB;IACjCqC,UAAU,EAAEtC,eAAe;IAC3BuC,cAAc,EAAErC,6BAA6B,IAAIa,KAAK,CAACyB;EAC3D,CAAG,EAAGC,gBAAgB,mBAAqBnB,KAAK,CAACC,aAAa,CAAC,KAAK,EAAE;IAClEU,KAAK,EAAEQ,gBAAgB;IACvBd,SAAS,EAAEd,OAAO,CAACpB;EACvB,CAAG,EAAEA,KAAK,CAAC,CAAC,CAAC;AACb,CAAC;AACDR,KAAK,CAACyD,WAAW,GAAG,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}